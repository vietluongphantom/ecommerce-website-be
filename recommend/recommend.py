import mysql.connector
from mlxtend.frequent_patterns import apriori, association_rules
from mlxtend.preprocessing import TransactionEncoder
import pandas as pd
from flask import Flask, request, jsonify
from flask_cors import CORS
from collections import defaultdict
from itertools import combinations
app = Flask(__name__)
CORS(app)  # Cho ph√©p cross-origin requests



def generate_frequent_itemsets(transactions, min_support):
    # Chuy·ªÉn ƒë·ªïi t·∫•t c·∫£ items sang string
    transactions = [[str(item) for item in transaction] for transaction in transactions]
     
     # Number of transactions
    n_transactions = len(transactions)
    print(f"\nTotal number of transactions: {n_transactions}")

    # S·ªë l∆∞·ª£ng giao d·ªãch
    n_transactions = len(transactions)
    
    # B∆∞·ªõc 1: T√¨m frequent 1-itemsets
    item_counts = defaultdict(int)
    for transaction in transactions:
        for item in transaction:
            item_counts[frozenset([item])] += 1
    
    # L·ªçc c√°c items c√≥ support >= min_support
    min_support_count = min_support * n_transactions
    frequent_itemsets = {
        k: v/n_transactions 
        for k, v in item_counts.items() 
        if v >= min_support_count
    }

    # Print frequent 1-itemsets with their support values
    print("\nFrequent 1-itemsets and their support values:")
    for item_set, support in frequent_itemsets.items():
        print(f"Item {list(item_set)[0]}: support = {support:.3f}")

    
    # B∆∞·ªõc 2: L·∫∑p ƒë·ªÉ t√¨m frequent k-itemsets
    k = 2
    while True:
        print(f"\n=== Finding {k}-itemsets ===")
        # T·∫°o candidate k-itemsets t·ª´ frequent (k-1)-itemsets
        candidates = set()
        prev_frequent_items = list(frequent_itemsets.keys())
        
        print(f"\nGenerating candidates from {len(prev_frequent_items)} previous frequent itemsets...")

        for i in range(len(prev_frequent_items)):
            for j in range(i+1, len(prev_frequent_items)):
                items1 = set(prev_frequent_items[i])
                items2 = set(prev_frequent_items[j])
                union = items1.union(items2)
                if len(union) == k:
                    candidates.add(frozenset(union))
        
        print(f"Generated {len(candidates)} candidate {k}-itemsets:")
        for candidate in candidates:
            print(f"Candidate: {set(candidate)}")

        if not candidates:
            print(f"\nNo {k}-itemset candidates generated. Stopping.")
            break
            
        # ƒê·∫øm support cho c√°c candidate
        candidate_counts = defaultdict(int)
        for transaction in transactions:
            transaction_set = set(transaction)
            for candidate in candidates:
                if candidate.issubset(transaction_set):
                    candidate_counts[candidate] += 1
        
        # Th√™m frequent k-itemsets v√†o k·∫øt qu·∫£
        k_frequent = {
            k: v/n_transactions 
            for k, v in candidate_counts.items() 
            if v >= min_support_count
        }
        
        print(f"\nFound {len(k_frequent)} frequent {k}-itemsets:")
        for itemset, support in k_frequent.items():
            print(f"Itemset {set(itemset)}: support = {support:.3f}")
        
        if not k_frequent:
            print(f"\nNo frequent {k}-itemsets found. Stopping.")
            break
            
        frequent_itemsets.update(k_frequent)
        k += 1
    
    print("\n=== Final Results ===")
    print(f"Total number of frequent itemsets found: {len(frequent_itemsets)}")
    print("\nAll frequent itemsets with their support values:")
    for itemset, support in frequent_itemsets.items():
        print(f"Itemset {set(itemset)}: support = {support:.3f}")

    return frequent_itemsets

def generate_association_rules(frequent_itemsets, min_confidence):

    print("\n=== B·∫ÆT ƒê·∫¶U T·∫†O LU·∫¨T K·∫æT H·ª¢P ===")
    print(f"S·ªë l∆∞·ª£ng t·∫≠p ph·ªï bi·∫øn ƒë·∫ßu v√†o: {len(frequent_itemsets)}")
    print(f"Ng∆∞·ª°ng ƒë·ªô tin c·∫≠y t·ªëi thi·ªÉu: {min_confidence}")
    
    rules = []
    rule_count = 0
    
    for itemset, support in frequent_itemsets.items():
        if len(itemset) < 2:
            continue
            
        print(f"\n ƒêang x·ª≠ l√Ω t·∫≠p ph·ªï bi·∫øn: {set(itemset)} (support = {support:.3f})")
        
        # T·∫°o t·∫•t c·∫£ c√°c subset c√≥ th·ªÉ l√†m antecedent
        for i in range(1, len(itemset)):
            
            for antecedent in combinations(itemset, i):
                antecedent = frozenset(antecedent)
                consequent = itemset - antecedent
                
                print(f"\n    Ki·ªÉm tra lu·∫≠t: {set(antecedent)} => {set(consequent)}")
                
                # T√≠nh confidence
                if antecedent in frequent_itemsets:
                    confidence = support / frequent_itemsets[antecedent]
                    print(f"       ƒê·ªô tin c·∫≠y = {confidence:.3f}")
                    
                    if confidence >= min_confidence:
                        rule_count += 1
                        print(f"       Lu·∫≠t th·ªèa m√£n ƒëi·ªÅu ki·ªán!")
                        rule = {
                            'antecedents': set(antecedent),
                            'consequents': set(consequent),
                            'support': support,
                            'confidence': confidence
                        }
                        rules.append(rule)
                    else:
                        print(f"       ƒê·ªô tin c·∫≠y th·∫•p h∆°n ng∆∞·ª°ng {min_confidence}")
                else:
                    print("       Ti·ªÅn ƒë·ªÅ kh√¥ng n·∫±m trong t·∫≠p ph·ªï bi·∫øn")
    
    print("\n=== K·∫æT QU·∫¢ CU·ªêI C√ôNG ===")
    print(f"T·ªïng s·ªë lu·∫≠t t√¨m ƒë∆∞·ª£c: {rule_count}")
    
    if rules:
        print("\nDanh s√°ch c√°c lu·∫≠t k·∫øt h·ª£p (s·∫Øp x·∫øp theo ƒë·ªô tin c·∫≠y):")
        sorted_rules = sorted(rules, key=lambda x: x['confidence'], reverse=True)
        for idx, rule in enumerate(sorted_rules, 1):
            print(f"\nLu·∫≠t {idx}:")
            print(f"  N·∫øu mua: {rule['antecedents']}")
            print(f"  Th√¨ s·∫Ω mua: {rule['consequents']}")
            print(f"  Support: {rule['support']:.3f}")
            print(f"  Confidence: {rule['confidence']:.3f}")
    
    return rules

def get_database_connection():
    """
    Thi·∫øt l·∫≠p k·∫øt n·ªëi ƒë·∫øn c∆° s·ªü d·ªØ li·ªáu MySQL
    """
    try:
        connection = mysql.connector.connect(
            host='localhost',          
            port=3306,                
            user='root',              
            password='kien0702',       
            database='ecommercedb'     
        )
        return connection
    except mysql.connector.Error as err:
        print(f" Kh√¥ng th·ªÉ k·∫øt n·ªëi database: {err}")
        raise

def get_order_data():
    """
    Ki·ªÉm tra k·∫øt n·ªëi v√† tr√≠ch xu·∫•t d·ªØ li·ªáu ƒë∆°n h√†ng t·ª´ c∆° s·ªü d·ªØ li·ªáu MySQL
    """
    connection = None
    try:
        # K·∫øt n·ªëi ƒë·∫øn c∆° s·ªü d·ªØ li·ªáu
        connection = get_database_connection()
        
        # Ki·ªÉm tra k·∫øt n·ªëi
        if connection.is_connected():
            print("‚úÖ K·∫øt n·ªëi database th√†nh c√¥ng!")
            
            cursor = connection.cursor()
            
            # Truy v·∫•n ki·ªÉm tra d·ªØ li·ªáu orders
            cursor.execute("SELECT COUNT(*) FROM orders")
            order_count = cursor.fetchone()[0]
            print(f"‚úÖ T·ªïng s·ªë ƒë∆°n h√†ng: {order_count}")
            
            # Truy v·∫•n ki·ªÉm tra d·ªØ li·ªáu order_item
            cursor.execute("SELECT COUNT(*) FROM order_item")
            order_item_count = cursor.fetchone()[0]
            print(f"‚úÖ T·ªïng s·ªë m·ª•c ƒë∆°n h√†ng: {order_item_count}")
            
            # Truy v·∫•n l·∫•y d·ªØ li·ªáu ƒë∆°n h√†ng chi ti·∫øt
            query = """
            SELECT 
    o.id AS order_id, 
    GROUP_CONCAT(pi.product_id ORDER BY pi.product_id SEPARATOR ',') AS product_items
FROM 
    orders o
JOIN 
    order_item oi ON o.id = oi.order_id
JOIN 
    product_item pi ON oi.product_item_id = pi.id
GROUP BY 
    o.id
            """
            cursor.execute(query)
            
            # L·∫•y v√† in ra m·ªôt s·ªë d√≤ng d·ªØ li·ªáu
            results = cursor.fetchall()
            print("\nüìã 10 d√≤ng d·ªØ li·ªáu ƒë·∫ßu ti√™n:")
            print("order_id | product_items")
            print("-" * 35)
            for row in results[:10]:
                print(f"{row[0]} | {row[1]}")
            
            # Nh√≥m s·∫£n ph·∫©m theo ƒë∆°n h√†ng
            orders = []
            for (order_id, product_items) in results:
                # Chuy·ªÉn danh s√°ch product_items (chu·ªói) th√†nh danh s√°ch c√°c s·∫£n ph·∫©m
                items = product_items.split(",") if product_items else []
                orders.append(items)
            
            # In ma tr·∫≠n 2 chi·ªÅu
            print("\nüìã Ma tr·∫≠n 2 chi·ªÅu (danh s√°ch c√°c s·∫£n ph·∫©m theo t·ª´ng ƒë∆°n h√†ng):")
            for row in orders:
                print(row)
            
            return orders
        
    except mysql.connector.Error as err:
        print(f"‚ùå L·ªói k·∫øt n·ªëi database: {err}")
        return []
    
    finally:
        # ƒê√≥ng k·∫øt n·ªëi
        if connection and connection.is_connected():
            connection.close()
            print("‚úÖ ƒê√£ ƒë√≥ng k·∫øt n·ªëi database")

def create_recommendation_rules(data):

    if not data:
        print(" Kh√¥ng c√≥ d·ªØ li·ªáu ƒë·ªÉ t·∫°o quy t·∫Øc!")
        return []

    print(" ƒêang t√¨m t·∫≠p m·ª•c th∆∞·ªùng xuy√™n...")
    frequent_itemsets = generate_frequent_itemsets(data, min_support=0.01)
    
    if not frequent_itemsets:
        print(" Kh√¥ng t√¨m th·∫•y t·∫≠p m·ª•c th∆∞·ªùng xuy√™n!")
        return []

    print(" ƒêang t·∫°o quy t·∫Øc k·∫øt h·ª£p...")
    rules = generate_association_rules(frequent_itemsets, min_confidence=0.01)
    
    print(f"‚úÖ ƒê√£ t·∫°o {len(rules)} quy t·∫Øc k·∫øt h·ª£p")
    return rules

def recommend_products(product_id, rules, top_n=5):
    # Chuy·ªÉn ƒë·ªïi product_id sang string
    product_id = str(product_id)
    print(f"\n=== T√åM G·ª¢I √ù CHO S·∫¢N PH·∫®M ID: {product_id} ===")
    # Ki·ªÉm tra rules c√≥ r·ªóng kh√¥ng
    if not rules:
        print(" Kh√¥ng c√≥ quy t·∫Øc ƒë·ªÉ t·∫°o recommendation")
        return []
    # L·ªçc c√°c lu·∫≠t c√≥ s·∫£n ph·∫©m ƒë·∫ßu v√†o trong t·∫≠p antecedents
    related_rules = [
        rule for rule in rules 
        if product_id in rule['antecedents']
    ]
    print(f" S·ªë l∆∞·ª£ng related_rules: {len(related_rules)}")
    if not related_rules:
        print(f" Kh√¥ng t√¨m th·∫•y rules li√™n quan ƒë·∫øn product_id {product_id}")
        return []
    # S·∫Øp x·∫øp theo ƒë·ªô tin c·∫≠y gi·∫£m d·∫ßn
    related_rules.sort(key=lambda x: x['confidence'], reverse=True)
    # L·∫•y danh s√°ch s·∫£n ph·∫©m g·ª£i √Ω
    recommendations = []
    for rule in related_rules:
        for item in rule['consequents']:
            if item != product_id and item not in recommendations:
                recommendations.append(item)
                if len(recommendations) == top_n:
                    break
        if len(recommendations) == top_n:
            break
    print(f" C√°c s·∫£n ph·∫©m ƒë∆∞·ª£c g·ª£i √Ω: {recommendations}")
    return recommendations


def get_product_details(recommended_product_ids):
    """
    L·∫•y chi ti·∫øt s·∫£n ph·∫©m t·ª´ database MySQL
    """
    connection = None
    try:
        # K·∫øt n·ªëi ƒë·∫øn c∆° s·ªü d·ªØ li·ªáu
        connection = get_database_connection()
        
        if connection.is_connected():
            cursor = connection.cursor(dictionary=True)
            
            # Chuy·ªÉn ƒë·ªïi danh s√°ch product_ids sang chu·ªói ƒë·ªÉ truy v·∫•n
            product_ids_str = ','.join(recommended_product_ids)
            
            # Truy v·∫•n l·∫•y th√¥ng tin chi ti·∫øt s·∫£n ph·∫©m
            query = f"""
            SELECT 
                p.id AS product_id, 
                p.name, 
                p.min_price,
                COALESCE(r.average_stars, 0) AS average_rating,
                r.quantity AS rating_quantity
            FROM 
                product p
            LEFT JOIN 
                rate r ON p.id = r.product_id
            WHERE 
                p.id IN ({product_ids_str})
            """
            
            cursor.execute(query)
            product_details = cursor.fetchall()
            
            # B·ªï sung h√¨nh ·∫£nh chi ti·∫øt
            for product in product_details:
                # Truy v·∫•n l·∫•y h√¨nh ·∫£nh c·ªßa s·∫£n ph·∫©m
                image_query = f"""
                SELECT link 
                FROM images 
                WHERE product_id = {product['product_id']} 
                LIMIT 3
                """
                cursor.execute(image_query)
                images = cursor.fetchall()
                product['images'] = [img['link'] for img in images]
            
            return product_details
    
    except mysql.connector.Error as err:
        print(f"‚ùå L·ªói truy v·∫•n chi ti·∫øt s·∫£n ph·∫©m: {err}")
        return []
    
    finally:
        # ƒê√≥ng k·∫øt n·ªëi
        if connection and connection.is_connected():
            connection.close()

# Kh·ªüi t·∫°o c√°c quy t·∫Øc recommendation to√†n c·ª•c
global_data = get_order_data()
global_rules = create_recommendation_rules(global_data)

@app.route('/recommend', methods=['GET'])
def get_recommendations():
    """
    Endpoint API ƒë·ªÉ l·∫•y g·ª£i √Ω s·∫£n ph·∫©m chi ti·∫øt
    """
    product_id = request.args.get('product_id', default='1', type=str)
    top_n = request.args.get('top_n', default=5, type=int)
    
    try:
        # L·∫•y danh s√°ch product_ids ƒë∆∞·ª£c g·ª£i √Ω
        recommended_product_ids = recommend_products(product_id, global_rules, top_n)
        
        # L·∫•y chi ti·∫øt s·∫£n ph·∫©m
        product_details = get_product_details(recommended_product_ids)
        
        return jsonify({
            'product_id': product_id,
            'recommendations': product_details
        })
    except Exception as e:
        print(f"‚ùå L·ªói trong qu√° tr√¨nh t·∫°o recommendation: {e}")
        return jsonify({'error': str(e)}), 400

# C·∫•u h√¨nh ƒë·ªÉ ch·∫°y ·ª©ng d·ª•ng
if __name__ == '__main__':
    app.run(debug=True, port=3001)
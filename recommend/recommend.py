import mysql.connector
from mlxtend.frequent_patterns import apriori, association_rules
from mlxtend.preprocessing import TransactionEncoder
import pandas as pd
from flask import Flask, request, jsonify
from flask_cors import CORS

app = Flask(__name__)
CORS(app)  # Cho ph√©p cross-origin requests

def get_database_connection():
    """
    Thi·∫øt l·∫≠p k·∫øt n·ªëi ƒë·∫øn c∆° s·ªü d·ªØ li·ªáu MySQL
    """
    try:
        connection = mysql.connector.connect(
            host='localhost',          # ƒê·ªãa ch·ªâ m√°y ch·ªß MySQL
            port=3306,                 # C·ªïng MySQL 
            user='root',               # T√™n ƒëƒÉng nh·∫≠p MySQL
            password='kien0702',       # M·∫≠t kh·∫©u MySQL 
            database='ecommercedb'     # T√™n c∆° s·ªü d·ªØ li·ªáu
        )
        return connection
    except mysql.connector.Error as err:
        print(f"‚ùå Kh√¥ng th·ªÉ k·∫øt n·ªëi database: {err}")
        raise

def get_order_data():
    """
    Ki·ªÉm tra k·∫øt n·ªëi v√† tr√≠ch xu·∫•t d·ªØ li·ªáu ƒë∆°n h√†ng t·ª´ c∆° s·ªü d·ªØ li·ªáu MySQL
    """
    connection = None
    try:
        # K·∫øt n·ªëi ƒë·∫øn c∆° s·ªü d·ªØ li·ªáu
        connection = get_database_connection()
        
        # Ki·ªÉm tra k·∫øt n·ªëi
        if connection.is_connected():
            print("‚úÖ K·∫øt n·ªëi database th√†nh c√¥ng!")
            
            cursor = connection.cursor()
            
            # Truy v·∫•n ki·ªÉm tra d·ªØ li·ªáu orders
            cursor.execute("SELECT COUNT(*) FROM orders")
            order_count = cursor.fetchone()[0]
            print(f"‚úÖ T·ªïng s·ªë ƒë∆°n h√†ng: {order_count}")
            
            # Truy v·∫•n ki·ªÉm tra d·ªØ li·ªáu order_item
            cursor.execute("SELECT COUNT(*) FROM order_item")
            order_item_count = cursor.fetchone()[0]
            print(f"‚úÖ T·ªïng s·ªë m·ª•c ƒë∆°n h√†ng: {order_item_count}")
            
            # Truy v·∫•n l·∫•y d·ªØ li·ªáu ƒë∆°n h√†ng chi ti·∫øt
            query = """
            SELECT 
    o.id AS order_id, 
    GROUP_CONCAT(pi.product_id ORDER BY pi.product_id SEPARATOR ',') AS product_items
FROM 
    orders o
JOIN 
    order_item oi ON o.id = oi.order_id
JOIN 
    product_item pi ON oi.product_item_id = pi.id
GROUP BY 
    o.id
            """
            cursor.execute(query)
            
            # L·∫•y v√† in ra m·ªôt s·ªë d√≤ng d·ªØ li·ªáu
            results = cursor.fetchall()
            print("\nüìã 10 d√≤ng d·ªØ li·ªáu ƒë·∫ßu ti√™n:")
            print("order_id | product_items")
            print("-" * 35)
            for row in results[:10]:
                print(f"{row[0]} | {row[1]}")
            
            # Nh√≥m s·∫£n ph·∫©m theo ƒë∆°n h√†ng
            orders = []
            for (order_id, product_items) in results:
                # Chuy·ªÉn danh s√°ch product_items (chu·ªói) th√†nh danh s√°ch c√°c s·∫£n ph·∫©m
                items = product_items.split(",") if product_items else []
                orders.append(items)
            
            # In ma tr·∫≠n 2 chi·ªÅu
            print("\nüìã Ma tr·∫≠n 2 chi·ªÅu (danh s√°ch c√°c s·∫£n ph·∫©m theo t·ª´ng ƒë∆°n h√†ng):")
            for row in orders:
                print(row)
            
            return orders
        
    except mysql.connector.Error as err:
        print(f"‚ùå L·ªói k·∫øt n·ªëi database: {err}")
        return []
    
    finally:
        # ƒê√≥ng k·∫øt n·ªëi
        if connection and connection.is_connected():
            connection.close()
            print("‚úÖ ƒê√£ ƒë√≥ng k·∫øt n·ªëi database")

def create_recommendation_rules(data):
    """
    T·∫°o quy t·∫Øc g·ª£i √Ω s·∫£n ph·∫©m t·ª´ d·ªØ li·ªáu ƒë∆°n h√†ng
    """
    if not data:
        print("‚ùå Kh√¥ng c√≥ d·ªØ li·ªáu ƒë·ªÉ t·∫°o quy t·∫Øc!")
        return pd.DataFrame()  # Tr·∫£ v·ªÅ DataFrame r·ªóng

    # Chuy·ªÉn ƒë·ªïi t·∫•t c·∫£ c√°c item sang string ƒë·ªÉ ƒë·∫£m b·∫£o t√≠nh nh·∫•t qu√°n
    data = [[str(item) for item in order] for order in data]

    # S·ª≠ d·ª•ng TransactionEncoder ƒë·ªÉ chuy·ªÉn ƒë·ªïi d·ªØ li·ªáu
    te = TransactionEncoder()
    te_ary = te.fit(data).transform(data)
    df = pd.DataFrame(te_ary, columns=te.columns_)

    # T√¨m t·∫≠p m·ª•c th∆∞·ªùng xuy√™n v·ªõi ng∆∞·ª°ng support th·∫•p h∆°n
    print("üîç ƒêang t√¨m t·∫≠p m·ª•c th∆∞·ªùng xuy√™n...")
    frequent_itemsets = apriori(df, min_support=0.01, use_colnames=True)
    
    # Ki·ªÉm tra frequent_itemsets
    if frequent_itemsets.empty:
        print("‚ùå Kh√¥ng t√¨m th·∫•y t·∫≠p m·ª•c th∆∞·ªùng xuy√™n!")
        return pd.DataFrame()

    # T·∫°o quy t·∫Øc k·∫øt h·ª£p
    print("üîç ƒêang t·∫°o quy t·∫Øc k·∫øt h·ª£p...")
    rules = association_rules(
        frequent_itemsets, 
        metric="confidence", 
        min_threshold=0.01,  # Gi·∫£m ng∆∞·ª°ng confidence
        num_itemsets=2
    )
    
    print(f"‚úÖ ƒê√£ t·∫°o {len(rules)} quy t·∫Øc k·∫øt h·ª£p")
    return rules

def recommend_products(product_id, rules, top_n=5):
    """
    T·∫°o g·ª£i √Ω s·∫£n ph·∫©m d·ª±a tr√™n quy t·∫Øc k·∫øt h·ª£p
    """
    # Chuy·ªÉn ƒë·ªïi product_id sang string
    product_id = str(product_id)

    # Ki·ªÉm tra rules c√≥ r·ªóng kh√¥ng
    if rules.empty:
        print("‚ùå Kh√¥ng c√≥ quy t·∫Øc ƒë·ªÉ t·∫°o recommendation")
        return []

    # Debug: In th√¥ng tin chi ti·∫øt
    print(f"üîç T√¨m recommendation cho product_id: {product_id}")
    print(f"üìä T·ªïng s·ªë rules: {len(rules)}")

    # L·ªçc c√°c lu·∫≠t c√≥ s·∫£n ph·∫©m ƒë·∫ßu v√†o trong t·∫≠p antecedents
    related_rules = rules[rules['antecedents'].apply(lambda x: product_id in x)]
    
    print(f"üìä S·ªë l∆∞·ª£ng related_rules: {len(related_rules)}")
    
    if related_rules.empty:
        print(f"‚ùå Kh√¥ng t√¨m th·∫•y rules li√™n quan ƒë·∫øn product_id {product_id}")
        return []

    # S·∫Øp x·∫øp theo ƒë·ªô tin c·∫≠y gi·∫£m d·∫ßn
    related_rules = related_rules.sort_values('confidence', ascending=False)

    # L·∫•y danh s√°ch s·∫£n ph·∫©m g·ª£i √Ω
    recommendations = []
    for _, rule in related_rules.iterrows():
        for item in rule['consequents']:
            if item != product_id and item not in recommendations:
                recommendations.append(item)
                if len(recommendations) == top_n:
                    break
        if len(recommendations) == top_n:
            break
    
    print(f"‚úÖ C√°c s·∫£n ph·∫©m ƒë∆∞·ª£c g·ª£i √Ω: {recommendations}")
    return recommendations


def get_product_details(recommended_product_ids):
    """
    L·∫•y chi ti·∫øt s·∫£n ph·∫©m t·ª´ database MySQL
    """
    connection = None
    try:
        # K·∫øt n·ªëi ƒë·∫øn c∆° s·ªü d·ªØ li·ªáu
        connection = get_database_connection()
        
        if connection.is_connected():
            cursor = connection.cursor(dictionary=True)
            
            # Chuy·ªÉn ƒë·ªïi danh s√°ch product_ids sang chu·ªói ƒë·ªÉ truy v·∫•n
            product_ids_str = ','.join(recommended_product_ids)
            
            # Truy v·∫•n l·∫•y th√¥ng tin chi ti·∫øt s·∫£n ph·∫©m
            query = f"""
            SELECT 
                p.id AS product_id, 
                p.name, 
                p.min_price,
                COALESCE(r.average_stars, 0) AS average_rating,
                r.quantity AS rating_quantity
            FROM 
                product p
            LEFT JOIN 
                rate r ON p.id = r.product_id
            WHERE 
                p.id IN ({product_ids_str})
            """
            
            cursor.execute(query)
            product_details = cursor.fetchall()
            
            # B·ªï sung h√¨nh ·∫£nh chi ti·∫øt
            for product in product_details:
                # Truy v·∫•n l·∫•y h√¨nh ·∫£nh c·ªßa s·∫£n ph·∫©m
                image_query = f"""
                SELECT link 
                FROM images 
                WHERE product_id = {product['product_id']} 
                LIMIT 3
                """
                cursor.execute(image_query)
                images = cursor.fetchall()
                product['images'] = [img['link'] for img in images]
            
            return product_details
    
    except mysql.connector.Error as err:
        print(f"‚ùå L·ªói truy v·∫•n chi ti·∫øt s·∫£n ph·∫©m: {err}")
        return []
    
    finally:
        # ƒê√≥ng k·∫øt n·ªëi
        if connection and connection.is_connected():
            connection.close()

# Kh·ªüi t·∫°o c√°c quy t·∫Øc recommendation to√†n c·ª•c
global_data = get_order_data()
global_rules = create_recommendation_rules(global_data)

@app.route('/recommend', methods=['GET'])
def get_recommendations():
    """
    Endpoint API ƒë·ªÉ l·∫•y g·ª£i √Ω s·∫£n ph·∫©m chi ti·∫øt
    """
    product_id = request.args.get('product_id', default='1', type=str)
    top_n = request.args.get('top_n', default=5, type=int)
    
    try:
        # L·∫•y danh s√°ch product_ids ƒë∆∞·ª£c g·ª£i √Ω
        recommended_product_ids = recommend_products(product_id, global_rules, top_n)
        
        # L·∫•y chi ti·∫øt s·∫£n ph·∫©m
        product_details = get_product_details(recommended_product_ids)
        
        return jsonify({
            'product_id': product_id,
            'recommendations': product_details
        })
    except Exception as e:
        print(f"‚ùå L·ªói trong qu√° tr√¨nh t·∫°o recommendation: {e}")
        return jsonify({'error': str(e)}), 400

# C·∫•u h√¨nh ƒë·ªÉ ch·∫°y ·ª©ng d·ª•ng
if __name__ == '__main__':
    app.run(debug=True, port=3001)